using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using MoonSharp.Interpreter;

namespace Playground
{
	public class HardwireCodeGenerator
	{
		Table m_Table;
		CodeCompileUnit CompileUnit = new CodeCompileUnit();
		CodeStatementCollection InitStatements;
		CodeTypeDeclaration KickstarterClass;


		readonly CodeNamespace Namespace = new CodeNamespace("MoonSharp.Interpreter.HardwiredDescriptors");

		public HardwireCodeGenerator(Table t)
		{
			m_Table = t;

			CompileUnit.Namespaces.Add(Namespace);

			Comment("----------------------------------------------------------");
			Comment("Generated by MoonSharp.Hardwire v.{0}", Assembly.GetExecutingAssembly().GetName().Version);
			Comment("Compatible with MoonSharp v.{0}", Script.VERSION);
			Comment("Code generated on {0}", DateTime.Now.ToString("u"));
			Comment("----------------------------------------------------------");
			Comment("");
			Comment("");
			Comment("");
		}

		public void GenerateCode()
		{
			GenerateKickstarter();

			DispatchTablePairs(m_Table, KickstarterClass.Members, 
				exp => InitStatements.Add(new CodeMethodInvokeExpression(new CodeTypeReferenceExpression(typeof(UserData)), "Register", exp)));

			GenerateCSharpCode(CompileUnit, @"c:\temp\gen.cs");
		}

		public void DispatchTablePairs(Table m_Table, CodeTypeMemberCollection members, Action<CodeExpression> action = null)
		{
			foreach (var pair in m_Table.Pairs)
			{
				if (pair.Value.Type == DataType.Table)
				{
					var exp = DispatchTable(pair.Key.String, pair.Value.Table, members);

					if (action != null)
						foreach(var e in exp)
							action(e);
				}
				else
				{
					Error("Type/Member '{0}' cannot be hardwired.", pair.Key.String);
				}
			}
		}


		public CodeExpression[] DispatchTable(string key, Table table, CodeTypeMemberCollection members)
		{
			DynValue d = table.Get("class");
			if (d.Type != DataType.String)
				throw new ArgumentException("table cannot be dispatched as it has no class or class of invalid type.");

			table.Set("$key", DynValue.NewString(key));

			var gen = HardwireGeneratorRegistry.GetGenerator(d.String);
			return gen.Generate(table, this, members);
		}

		public void Comment(string format, params object[] args)
		{
			string str = string.Format(format, args);
			Namespace.Comments.Add(new CodeCommentStatement(str));
		}



		public void Error(string format, params object[] args)
		{
			string str = string.Format(format, args);
			Namespace.Comments.Add(new CodeCommentStatement("ERROR : " + str));
		}

		public void Warning(string format, params object[] args)
		{
			string str = string.Format(format, args);
			Namespace.Comments.Add(new CodeCommentStatement("WARNING : " + str));
		}



		public void GenerateCSharpCode(CodeCompileUnit targetUnit, string fileName)
		{
			CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
			//CodeDomProvider provider = CodeDomProvider.CreateProvider("VB");
			//CodeDomProvider provider = CodeDomProvider.CreateProvider("cpp");
			
			CodeGeneratorOptions options = new CodeGeneratorOptions();
			//options.BracingStyle = "C";
			//options.BlankLinesBetweenMembers = true;

			using (StreamWriter sourceWriter = new StreamWriter(fileName))
			{
				provider.GenerateCodeFromCompileUnit(
					targetUnit, sourceWriter, options);
			}
		}


		private void GenerateKickstarter()
		{
			var cl = new CodeTypeDeclaration("HardwiredDescriptorRegister");
			cl.TypeAttributes = System.Reflection.TypeAttributes.Public |
				System.Reflection.TypeAttributes.Abstract | System.Reflection.TypeAttributes.Sealed;

			Namespace.Types.Add(cl);

			CodeConstructor ctor = new CodeConstructor();
			ctor.Attributes = MemberAttributes.Private;
			cl.Members.Add(ctor);

			CodeMemberMethod m = new CodeMemberMethod();
			m.Name = "Initialize";
			m.Attributes = MemberAttributes.Static | MemberAttributes.Public;

			cl.Members.Add(m);

			this.InitStatements = m.Statements;
			this.KickstarterClass = cl;
		}




	}
}
